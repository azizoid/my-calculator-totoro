{"version":3,"sources":["App.jsx","img/totoro.png","components/screen/screen.jsx","serviceWorker.js","index.js"],"names":["App","props","numberFunction","value","input","state","query","display","setState","actionFunction","clearDisplay","equalsFunction","answer","eval","result","error","console","log","clearQuery","handleButtonClicked","buttons","className","src","totoro","alt","height","key","this","map","item","onClick","React","Component","module","exports","Screen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"88CAKMA,I,2BACJ,aAAYC,OAAQ,IAAD,2JACjB,6SAAMA,QADW,MAUnBC,eAAiB,SAACC,GAChB,IAAIC,EAAQ,MAAKC,MAAMC,OAASH,EAC5BI,EAAU,MAAKF,MAAME,SAAWJ,EACpC,MAAKK,SAAS,CAAED,QAASA,IACzB,MAAKC,SAAS,CAAEF,MAAOF,KAdN,MAiBnBK,eAAkB,SAAAN,GAChB,MAAKK,SAAS,CAAED,QAASJ,IACzB,IAAIC,EAAQ,MAAKC,MAAMC,OAASH,EAChC,MAAKK,SAAS,CAAEF,MAAOF,IACvB,MAAKM,gBArBY,MAwBnBC,eAAiB,WACf,IAAIL,MAAQ,MAAKD,MAAMC,MACvB,IACE,IAAIM,OAASC,KAAKP,OAClB,MAAKE,SAAS,CAAEM,OAAQF,SACxB,MAAKJ,SAAS,CAAED,QAASK,SACzB,MAAKJ,SAAS,CAAEF,MAAOM,SAEzB,MAAOG,OACLC,QAAQC,IAAIF,OACZ,MAAKP,SAAS,CAAED,QAAS,YAlCV,MAsCnBG,aAAe,WACb,MAAKF,SAAS,CAAED,QAAS,MAvCR,MA0CnBW,WAAa,WACX,MAAKV,SAAS,CAAED,QAAS,KACzB,MAAKC,SAAS,CAAEF,MAAO,MA5CN,MA+CnBa,oBAAsB,SAAChB,GACP,MAAVA,EACF,MAAKe,aAES,MAAVf,EACF,MAAKQ,iBAES,MAAVR,GAA2B,MAAVA,GAA2B,MAAVA,GAA2B,MAAVA,EACrD,MAAKM,eAAeN,GAEpB,MAAKD,eAAeC,IAvD1B,MAAKE,MAAQ,CACXe,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,IAAK,KAC5Db,QAAS,GACTD,MAAO,GACPQ,OAAQ,IANO,M,gUAgET,IAAD,OACP,OACE,kEAAKO,UAAU,OACb,qEAAQA,UAAU,eAElB,kEAAKA,UAAU,YACb,kEAAKA,UAAU,WAEf,sFACA,+EACA,kEAAKA,UAAU,UACb,kEAAKC,IAAKC,uDAAQC,IAAI,SAASC,OAAO,MAAMJ,UAAU,eAEtD,kEAAKA,UAAU,cACb,kEAAKA,UAAU,kBACf,2DAAC,yDAAD,CAAQK,IAAKC,KAAKtB,MAAME,QAASA,QAASoB,KAAKtB,MAAME,QAASY,oBAAqBQ,KAAKR,uBAGxF,kEAAKE,UAAU,cACb,kEAAKA,UAAU,WACZM,KAAKtB,MAAMe,QAAQQ,KAAI,SAAAC,GAAI,OAC1B,qEACEH,IAAKG,EACLC,QAAS,kBACP,EAAKX,oBAAoBU,KAGxBA,gB,KA5FPE,6CAAMC,WA2GThC,2B,gBChHfiC,EAAOC,QAAU,IAA0B,oC,4FCGrCC,E,YACF,WAAYlC,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTS,OAAQ,EAAKb,MAAMM,SAHR,E,sEAOT,IAAD,OAEL,OACQ,yBAAKc,UAAU,cACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACVM,KAAKtB,MAAMS,QAGhB,4BAAQO,UAAU,gBAAgBK,IAAK,IAAKI,QAAS,kBACjD,EAAK7B,MAAMkB,oBAAoB,OADnC,KAKA,4BAAQE,UAAU,eAAeK,IAAK,IAAKI,QAAS,kBAChD,EAAK7B,MAAMkB,oBAAoB,OADnC,W,GAtBHY,IAAMC,WAkCZG,O,kLCzBKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC1C,EAAA,EAAD,MAAS2C,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f854f89c.chunk.js","sourcesContent":["import React from 'react';\nimport totoro from './img/totoro.png'\nimport './App.css';\nimport Screen from './components/screen/screen';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttons: [7, 8, 9, 4, 5, 6, 1, 2, 3, 0, \".\", \"+\", \"-\", \"/\", \"*\"],\n      display: \"\",\n      query: \"\",\n      result: \"\"\n    };\n  }\n\n  numberFunction = (value) => {\n    let input = this.state.query += value;\n    let display = this.state.display += value;\n    this.setState({ display: display });\n    this.setState({ query: input});\n  };\n\n  actionFunction = (value => {\n    this.setState({ display: value });\n    let input = this.state.query += value;\n    this.setState({ query: input});\n    this.clearDisplay();\n  })\n\n  equalsFunction = () => {\n    let query = this.state.query;\n    try {\n      let answer = eval(query);\n      this.setState({ result: answer });\n      this.setState({ display: answer});\n      this.setState({ query: answer})\n    }\n    catch (error) {\n      console.log(error);\n      this.setState({ display: \"error\"})\n    }\n  };\n\n  clearDisplay = () => {\n    this.setState({ display: \"\"});\n  };\n\n  clearQuery = () => {\n    this.setState({ display: \"\"});\n    this.setState({ query: \"\"});\n  };\n\n  handleButtonClicked = (value) => {\n    if (value === \"C\") {\n      this.clearQuery();\n    } else {\n      if (value === \"=\") {\n        this.equalsFunction();\n      } else {\n        if (value === \"+\" || value === \"-\" || value === \"*\" || value === \"/\" ) {\n          this.actionFunction(value);\n        } else {\n          this.numberFunction(value);\n          }\n        }\n      }\n    }\n        \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        <div className=\"App-Body\">\n          <div className=\"Header\">\n          </div>\n          <h3>My Calculator</h3>\n          <h1>TOTORO</h1>\n          <div className=\"Totoro\">\n            <img src={totoro} alt=\"Totoro\" height=\"600\" className=\"Tototo-Img\"/>\n\n            <div className=\"Calculator\">\n              <div className=\"Display-Screen\">\n              <Screen key={this.state.display} display={this.state.display} handleButtonClicked={this.handleButtonClicked}/>\n              </div>\n              \n              <div className=\"Button-Pad\">\n                <div className=\"Buttons\">\n                  {this.state.buttons.map(item => (\n                    <button\n                      key={item}\n                      onClick={() =>\n                        this.handleButtonClicked(item)\n                      }\n                      >\n                        {item}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/totoro.f93bb596.png\";","import './screen.css';\nimport React from 'react';\n\nclass Screen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            result: this.props.display\n        }\n    }\n    \n    render() {\n        \n        return(\n                <div className=\"Screen-Div\">\n                    <div className=\"Display\">\n                        <div className=\"Result\">\n                            {this.state.result}\n                        </div>\n                        \n                        <button className=\"Equals-Button\" key={\"=\"} onClick={() =>\n                            this.props.handleButtonClicked(\"=\")\n                        }>\n                        =\n                        </button>\n                        <button className=\"Clear-Button\" key={\"C\"} onClick={() =>\n                            this.props.handleButtonClicked(\"C\")\n                        }>\n                        C\n                        </button>\n\n                    </div>\n                </div>\n        )\n    }\n}\n\nexport default Screen;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}